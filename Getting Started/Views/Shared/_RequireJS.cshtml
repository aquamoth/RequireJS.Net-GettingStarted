@using RequireJsNet
@using RequireJsNet.Configuration
@Html.RenderRequireJsSetup(new RequireRendererConfiguration
{
    // the url from where require.js will be loaded
    RequireJsUrl = Url.Content("~/Scripts/Components/RequireJS/require.js"),
    // baseUrl to be passed to require.js, will be used when composing urls for scripts
    BaseUrl = Url.Content("~/Scripts/"),
    // a list of all the configuration files you want to load
    ConfigurationFiles = new[] { "~/RequireJS.json" },
    // root folder for your js controllers, will be used for composing paths to entrypoint
    EntryPointRoot = "~/Scripts/",
    // whether we should load overrides or not, used for autoBundles, disabled on debug mode
    LoadOverrides = !HttpContext.Current.IsDebuggingEnabled,
    // compute the value you want locale to have, used for i18n
    LocaleSelector = html => System.Threading.Thread.CurrentThread.CurrentUICulture.Name.Split('-')[0],
    // store config in aspnet cache to avoid IO operations at each request
    ConfigCachingPolicy = HttpContext.Current.IsDebuggingEnabled ? ConfigCachingPolicy.None : ConfigCachingPolicy.Permanent,
    CacheConfigObject = !HttpContext.Current.IsDebuggingEnabled,
    // instance of IRequireJsLogger
    Logger = null,
    // extensability point for the config object
    ProcessConfig = config => { },
    // extensability point for the options object
    ProcessOptions = options => { },
    // value for urlArgs to be passed to require.js, used for versioning
    UrlArgs = "v=" + (HttpContext.Current.IsDebuggingEnabled ? DateTime.UtcNow.Ticks.ToString() : typeof(MvcApplication).Assembly.GetName().Version.ToString())
})